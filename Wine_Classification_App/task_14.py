# -*- coding: utf-8 -*-
"""Task_14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19RN4GC6Z28swnkEWJkFeJvOE_Nn0kGFr
"""



import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

## Load Dataset

url = "https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"
cols = ["Class","Alcohol","Malic_acid","Ash","Alcalinity_of_ash","Magnesium",
        "Total_phenols","Flavanoids","Nonflavanoid_phenols","Proanthocyanins",
        "Color_intensity","Hue","OD280_OD315","Proline"]

df = pd.read_csv(url, header=None, names=cols)
df.head()

df.info()

df.describe()

df.isnull().sum()

cols = df.columns

fig, axes = plt.subplots(5, 3, figsize=(15, 15))
axes = axes.flatten()

for i, col in enumerate(cols):
    axes[i].hist(df[col], bins=20, color='skyblue', edgecolor='black')
    axes[i].set_title(col)
    axes[i].set_ylabel("Frequency")

for j in range(i+1, len(axes)):
    fig.delaxes(axes[j])

plt.tight_layout()
plt.show()

## Features & Target

X = df.drop("Class", axis=1)
y = df["Class"]

df['Class'].value_counts()

## Split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

## Scale Features

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

## Train Models

logistic_model = LogisticRegression(max_iter=500)
logistic_model.fit(X_train_scaled, y_train)

decision_tree_model = DecisionTreeClassifier(random_state=42)
decision_tree_model.fit(X_train, y_train)  # doesn't need scaling

knn_model = KNeighborsClassifier(n_neighbors=5)
knn_model.fit(X_train_scaled, y_train)

## Streamlit UI

st.set_page_config(page_title="üç∑ Wine Classifier", layout="wide")
st.title("üç∑ Wine Classification App")
st.markdown("Choose a model to classify wines into **3 classes** based on chemical features.")

## Sidebar Model Selector

model_choice = st.sidebar.selectbox(
    "üîÄ Choose Model",
    ("Logistic Regression", "Decision Tree", "KNN")
)

## Pick Model

if model_choice == "Logistic Regression":
    model = logistic_model
    X_used, X_used_test = X_train_scaled, X_test_scaled
elif model_choice == "Decision Tree":
    model = decision_tree_model
    X_used, X_used_test = X_train, X_test
else:
    model = knn_model
    X_used, X_used_test = X_train_scaled, X_test_scaled

## Model Performance

from sklearn.metrics import f1_score, accuracy_score, confusion_matrix

st.header("üìä Model Performance")

y_pred = model.predict(X_used_test)
acc = accuracy_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred, average="weighted")

col1, col2 = st.columns(2)
col1.metric("Accuracy", f"{acc:.2f}")
col2.metric("F1 Score", f"{f1:.2f}")

st.subheader("Confusion Matrix")
cm = confusion_matrix(y_test, y_pred)
fig, ax = plt.subplots()
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=np.unique(y), yticklabels=np.unique(y), ax=ax)
ax.set_xlabel("Predicted")
ax.set_ylabel("Actual")
st.pyplot(fig)

## User Input for Prediction

st.header("üß™ Try It Yourself")
st.markdown("Adjust the sliders below to classify a new wine sample:")

# Create sliders in 2 columns for better layout
cols = st.columns(2)
user_input = []

for i, col_name in enumerate(X.columns):
    with cols[i % 2]:  # alternate sliders between two columns
        val = st.slider(
            label=col_name,
            min_value=float(X[col_name].min()),
            max_value=float(X[col_name].max()),
            value=float(X[col_name].mean())
        )
        user_input.append(val)

user_input = np.array(user_input).reshape(1, -1)

# Scale if needed
if model_choice in ["Logistic Regression", "KNN"]:
    user_input = scaler.transform(user_input)

# Predict button
if st.button("üöÄ Predict Class"):
    prediction = model.predict(user_input)[0]
    probas = model.predict_proba(user_input)[0]
    classes = model.classes_

    st.success(f"üéØ Predicted Wine Class: **{prediction}**")
    st.subheader("üìä Prediction Probabilities:")
    for cls, prob in zip(classes, probas):
        st.write(f"- Class {cls}: {prob:.2f}")

