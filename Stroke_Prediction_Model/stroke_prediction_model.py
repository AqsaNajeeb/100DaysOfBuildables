# -*- coding: utf-8 -*-
"""Stroke_Prediction_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wCwPO_jkImKcHWZq_cu3NSPkHwaL2qVC
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns

# Load trained model
model = joblib.load("model.pkl")

# Load actual dataset
df = pd.read_csv("healthcare-dataset-stroke-data.csv")

st.set_page_config(page_title="üß† Stroke Prediction App", layout="wide")

# Title & Description
st.title("üß† Stroke Prediction System")
st.write("""
This app predicts the 'Risk of Stroke' based on patient health information.
Fill in the details in the sidebar and click 'Predict Stroke Risk' to see results.
""")

# Sidebar Inputs
st.sidebar.header("üìù Patient Information")

gender = st.sidebar.selectbox("Gender", ["Male", "Female"])
age = st.sidebar.number_input("Age", min_value=0, max_value=120, value=40)
hypertension = st.sidebar.selectbox("Hypertension", ["No", "Yes"])
heart_disease = st.sidebar.selectbox("Heart Disease", ["No", "Yes"])
ever_married = st.sidebar.selectbox("Ever Married", ["No", "Yes"])
work_type = st.sidebar.selectbox(
    "Work Type",
    ["Govt_job", "Private", "Self-employed", "Never_worked", "children"]
)
residence_type = st.sidebar.selectbox("Residence Type", ["Urban", "Rural"])
avg_glucose_level = st.sidebar.number_input(
    "Average Glucose Level", min_value=40.0, max_value=300.0, value=100.0
)
bmi = st.sidebar.number_input(
    "BMI", min_value=10.0, max_value=60.0, value=25.0
)
smoking_status = st.sidebar.selectbox(
    "Smoking Status", ["never smoked", "formerly smoked", "smokes", "Unknown"]
)

# Preprocess Input
input_dict = {
    "gender": 1 if gender == "Male" else 0,
    "age": age,
    "hypertension": 1 if hypertension == "Yes" else 0,
    "heart_disease": 1 if heart_disease == "Yes" else 0,
    "ever_married": 1 if ever_married == "Yes" else 0,
    "avg_glucose_level": avg_glucose_level,
    "bmi": bmi,
    "work_type_Govt_job": 1 if work_type == "Govt_job" else 0,
    "work_type_Never_worked": 1 if work_type == "Never_worked" else 0,
    "work_type_Private": 1 if work_type == "Private" else 0,
    "work_type_Self-employed": 1 if work_type == "Self-employed" else 0,
    "work_type_children": 1 if work_type == "children" else 0,
    "Residence_type_Rural": 1 if residence_type == "Rural" else 0,
    "Residence_type_Urban": 1 if residence_type == "Urban" else 0,
    "smoking_status_Unknown": 1 if smoking_status == "Unknown" else 0,
    "smoking_status_formerly smoked": 1 if smoking_status == "formerly smoked" else 0,
    "smoking_status_never smoked": 1 if smoking_status == "never smoked" else 0,
    "smoking_status_smokes": 1 if smoking_status == "smokes" else 0,
}

# Ensure feature order matches training
feature_order = [
    'gender', 'age', 'hypertension', 'heart_disease', 'ever_married',
    'avg_glucose_level', 'bmi',
    'work_type_Govt_job', 'work_type_Never_worked', 'work_type_Private',
    'work_type_Self-employed', 'work_type_children',
    'Residence_type_Rural', 'Residence_type_Urban',
    'smoking_status_Unknown', 'smoking_status_formerly smoked',
    'smoking_status_never smoked', 'smoking_status_smokes'
]

input_df = pd.DataFrame([[input_dict[feat] for feat in feature_order]], columns=feature_order)

# Prediction
if st.sidebar.button("üöÄ Predict Stroke Risk"):
    prob = model.predict_proba(input_df)[:, 1][0]
    pred = model.predict(input_df)[0]

    st.subheader("üîÆ Prediction Result")
    if pred == 1:
        st.error(f"‚ö†Ô∏è Patient is **at risk of Stroke**.\n\nProbability: {prob:.2%}")
    else:
        st.success(f"‚úÖ Patient is **not likely to have Stroke**.\n\nProbability: {prob:.2%}")

# Actual Data Visuals   #
st.subheader("üìä Data Insights")

# Stroke rate by smoking status
fig1 = px.bar(
    df.groupby("smoking_status")["stroke"].mean().reset_index(),
    x="smoking_status", y="stroke",
    title="Stroke Rate by Smoking Status",
    color="smoking_status"
)
st.plotly_chart(fig1, use_container_width=True)

# Correlation heatmap
numeric_cols = ["age", "avg_glucose_level", "bmi", "hypertension", "heart_disease", "stroke"]
corr = df[numeric_cols].corr()

fig2, ax = plt.subplots(figsize=(6, 4))
sns.heatmap(corr, annot=True, cmap="coolwarm", ax=ax)
st.pyplot(fig2)

# Age distribution by stroke outcome
fig3 = px.histogram(
    df, x="age", color="stroke", barmode="overlay",
    nbins=30, title="Age Distribution (Stroke vs Non-Stroke)"
)
st.plotly_chart(fig3, use_container_width=True)

# Glucose level distribution by stroke outcome
fig4 = px.histogram(
    df, x="avg_glucose_level", color="stroke", barmode="overlay",
    nbins=30, title="Glucose Level Distribution (Stroke vs Non-Stroke)"
)
st.plotly_chart(fig4, use_container_width=True)

# BMI distribution by stroke outcome
fig5 = px.histogram(
    df, x="bmi", color="stroke", barmode="overlay",
    nbins=30, title="BMI Distribution (Stroke vs Non-Stroke)"
)
st.plotly_chart(fig5, use_container_width=True)

st.caption("‚úÖ Insights are based on the real dataset used for training.")

